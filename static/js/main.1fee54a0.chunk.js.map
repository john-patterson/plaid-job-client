{"version":3,"sources":["components/FilterBox.tsx","pages/JobListingPage.tsx","sdk/JobPostingApi.ts","components/TextInput.tsx","pages/JobApplyPage.tsx","pages/SuccessPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FilterBox","props","unfilteredValue","onChanged","useState","default","currentValue","setCurrentValue","value","onChange","event","target","className","options","map","city","idx","JobPost","post","text","categories","location","department","team","to","pathname","id","state","JobListingPage","unfilteredCity","unfilteredDepartment","currentCity","setCurrentCity","currentDepartment","setCurrentDepartment","postings","cities","rawLocations","sort","Set","getCities","departments","rawDepts","getDepartments","filter","job","JobPostingApi","Promise","resolve","jobData","x","TextInput","initialValue","required","label","type","JobApplicationForm","jobId","name","setName","email","setEmail","resumeUrl","setResumeUrl","phone","setPhone","undefined","github","setGithub","twitter","setTwitter","website","setWebsite","setLocation","favoriteCandy","setFavoriteCandy","superpower","setSuperpower","redirect","setRedirect","onSubmit","console","log","JSON","stringify","job_id","resume","favorite_candy","parse","input","ReactHtmlParser","transform","transformFn","node","index","dangerousNode","attribs","style","convertNodeToElement","JobApplyPage","commitment","additional","description","lists","ls","content","SuccessPage","seconds","setSeconds","useEffect","interval","setInterval","clearInterval","App","setPostings","getPostings","then","exact","path","render","find","p","match","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fee54a0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './FilterBox.css';\r\n\r\ninterface IFilterBoxProps {\r\n  options: string[];\r\n  onChanged: (value: string) => void;\r\n  default?: string;\r\n  unfilteredValue?: string;\r\n}\r\n\r\nexport default function FilterBox(props: IFilterBoxProps): JSX.Element {\r\n  const { unfilteredValue, onChanged } = props;\r\n  const [currentValue, setCurrentValue] = useState(props.default ?? \"\");\r\n\r\n  const updateValue = (event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n    setCurrentValue(event.target.value);\r\n    onChanged(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <select value={currentValue}\r\n      onChange={updateValue}\r\n      className=\"filter-box\">\r\n      {unfilteredValue\r\n        ? <option value={unfilteredValue}>{unfilteredValue}</option>\r\n        : \"\"}\r\n      {[...props.options].map((city, idx) => (\r\n        <option key={idx} value={city}>{city}</option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport FilterBox from '../components/FilterBox';\r\nimport { JobPosting } from '../sdk/JobPostingApi';\r\n\r\nimport './JobListingPage.css';\r\n\r\nfunction JobPost(props: { post: JobPosting }) {\r\n  const { post } = props;\r\n  return (\r\n    <div className=\"job-post\">\r\n      <div className=\"job-title\">{post.text}</div>\r\n      <div className=\"job-details\">\r\n        <div className=\"job-detail job-location\">{post.categories.location}</div>\r\n        <div className=\"job-detail job-department\">{post.categories.department}</div>\r\n        <div className=\"job-detail job-team\">{post.categories.team}</div>\r\n      </div>\r\n      <Link className=\"job-apply-btn\"\r\n          to={{pathname: `/apply/${post.id}`, state: { post: post }}}>\r\n        Apply Now\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport interface IJobListingPage {\r\n  postings: JobPosting[];\r\n}\r\n\r\nexport default function JobListingPage(props: IJobListingPage): JSX.Element {\r\n  const unfilteredCity = \"Any City\";\r\n  const unfilteredDepartment = \"Any Department\";\r\n  let [currentCity, setCurrentCity] = useState(unfilteredCity);\r\n  let [currentDepartment, setCurrentDepartment] = useState(unfilteredDepartment);\r\n\r\n  const getCities = (postings: JobPosting[]): Set<string> => {\r\n    const rawLocations = postings\r\n      .map(post => post.categories.location)\r\n      .sort();\r\n    return new Set(rawLocations);\r\n  };\r\n\r\n  const getDepartments = (postings: JobPosting[]): Set<string> => {\r\n    const rawDepts = postings\r\n      .map(post => post.categories.department)\r\n      .sort();\r\n    return new Set(rawDepts);\r\n  };\r\n\r\n  const { postings } = props;\r\n  const cities = getCities(postings);\r\n  const departments = getDepartments(postings);\r\n\r\n  const filterPost = (post: JobPosting): boolean => {\r\n    if (currentCity !== unfilteredCity && currentCity !== post.categories.location) {\r\n      return false;\r\n    } else if (currentDepartment !== unfilteredDepartment && currentDepartment !== post.categories.department) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"filter-row\">\r\n          <FilterBox options={[...cities]}\r\n            onChanged={setCurrentCity}\r\n            default={unfilteredCity}\r\n            unfilteredValue={unfilteredCity} />\r\n          <FilterBox options={[...departments]}\r\n            onChanged={setCurrentDepartment}\r\n            default={unfilteredDepartment}\r\n            unfilteredValue={unfilteredDepartment} />\r\n        </div>\r\n        <div className=\"post-container\">\r\n          {postings.filter(filterPost).map((job, idx) => {\r\n            return (<JobPost key={idx} post={job} />);\r\n          })}\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n","import jobData from './job-data.json';\r\n\r\n// const jobsUrl = \"https://api.lever.co/v0/postings/plaid?mode=json\"\r\nexport interface JobPosting {\r\n    additional: string; // Text on company values, typically non-discrimination disclaimer.\r\n    applyUrl: string; // URL to apply page.\r\n    categories: JobCategory; // Job category that this job falls into.\r\n    createdAt: number; // Epoch time created.\r\n    description: string; // Role description.\r\n    hostedUrl: string; // Job page.\r\n    id: string; // Job ID.\r\n    lists: JobRequirements[]; // Lists desired experience and describes role.\r\n    text: string; // Job title.\r\n}\r\n\r\nexport interface JobCategory {\r\n    commitment: string;\r\n    department: string;\r\n    location: string;\r\n    team: string;\r\n}\r\n\r\nexport interface JobRequirements {\r\n    content: string;\r\n    text: string;\r\n}\r\n\r\nexport default class JobPostingApi {\r\n  getPostings(): Promise<JobPosting[]> {\r\n    return Promise.resolve(jobData.map(x => x as JobPosting));\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\ntype InputType = \"text\" | \"email\" | \"url\" | \"tel\";\r\n\r\nexport interface ITextInputProps {\r\n  label: string;\r\n  onChanged: (value: string) => void;\r\n  required?: boolean;\r\n  initialValue?: string;\r\n  type?: InputType;\r\n}\r\n\r\nexport default function TextInput(props: ITextInputProps): JSX.Element {\r\n  const [currentValue, setCurrentValue] = useState(props.initialValue ?? \"\");\r\n\r\n  const updateValue = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const value = event.target.value;\r\n    props.onChanged(value);\r\n    setCurrentValue(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={props.required ? \"required\" : \"\"}>\r\n        {props.label}\r\n      </label>\r\n      <input type={props.type ?? \"text\"} onChange={updateValue} value={currentValue} />\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useState } from 'react';\r\nimport { JobPosting } from '../sdk/JobPostingApi';\r\nimport ReactHtmlParser, { convertNodeToElement } from 'react-html-parser';\r\n\r\nimport './JobApplyPage.css';\r\nimport { Redirect } from 'react-router';\r\nimport TextInput from '../components/TextInput';\r\nimport { JobRequest } from '../sdk/JobApplyApi';\r\n\r\nexport interface IJobApplyPageProps {\r\n  post: JobPosting;\r\n}\r\n\r\nfunction JobApplicationForm(props: IJobApplyPageProps): JSX.Element {\r\n  const jobId = props.post.id;\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [resumeUrl, setResumeUrl] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const [github, setGithub] = useState<string | undefined>(undefined);\r\n  const [twitter, setTwitter] = useState<string | undefined>(undefined);\r\n  const [website, setWebsite] = useState<string | undefined>(undefined);\r\n  const [location, setLocation] = useState<string | undefined>(undefined);\r\n  const [favoriteCandy, setFavoriteCandy] = useState<string | undefined>(undefined);\r\n  const [superpower, setSuperpower] = useState<string | undefined>(undefined);\r\n\r\n  const createFormObject = (): JobRequest => ({\r\n    job_id: jobId,\r\n    name,\r\n    email,\r\n    resume: resumeUrl,\r\n    phone,\r\n    github,\r\n    twitter,\r\n    website,\r\n    location,\r\n    favorite_candy: favoriteCandy,\r\n    superpower\r\n  });\r\n\r\n \r\n  const [redirect, setRedirect] = useState(false);\r\n  const handleSubmit = (): void => {\r\n    console.log(JSON.stringify(createFormObject()));\r\n    setRedirect(true);\r\n  };\r\n\r\n  if (redirect) {\r\n    return (<Redirect to=\"/success\" />);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"job-application\">\r\n        <div className=\"form-data\">\r\n          <TextInput label=\"Name\" onChanged={setName} required={true} />\r\n          <TextInput label=\"Email\" onChanged={setEmail} required={true} type=\"email\" />\r\n          <TextInput label=\"Resume URL\" onChanged={setResumeUrl} required={true} type=\"url\" />\r\n          <TextInput label=\"Phone\" onChanged={setPhone} required={true} type=\"tel\" />\r\n\r\n          <TextInput label=\"Github\" onChanged={setGithub} type=\"url\" />\r\n          <TextInput label=\"Twitter\" onChanged={setTwitter} type=\"url\" />\r\n          <TextInput label=\"Website\" onChanged={setWebsite} type=\"url\" />\r\n          <TextInput label=\"Location\" onChanged={setLocation} type=\"text\" />\r\n          <TextInput label=\"Favorite Candy\" onChanged={setFavoriteCandy} type=\"text\" />\r\n          <TextInput label=\"Superpower\" onChanged={setSuperpower} type=\"text\" />\r\n        </div>\r\n\r\n        <input className=\"form-submit\" type=\"submit\" value=\"Submit\" />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst parse = (input: string): React.ReactElement[] => {\r\n  const transformFn = (node: Node, index: number): ReactElement | void | null => {\r\n    const dangerousNode = node as any;\r\n    if (dangerousNode && dangerousNode.attribs && dangerousNode.attribs.style) {\r\n      dangerousNode.attribs.style = \"\";\r\n    }\r\n    return convertNodeToElement(node, index, transformFn);\r\n  };\r\n  return ReactHtmlParser(input, {\r\n    transform: transformFn\r\n  });\r\n};\r\n\r\nexport default function JobApplyPage(props: IJobApplyPageProps): JSX.Element {\r\n  return (\r\n    <div className=\"job-application-page\">\r\n      <div className=\"job-application-container\">\r\n        <h1>{props.post.text}</h1>\r\n        <div className=\"job-classification\">\r\n          <h2>Classification</h2>\r\n          <div className=\"blurb-body job-categories\">\r\n            <label>Location</label>\r\n            <span>{props.post.categories.location}</span>\r\n            <label>Department</label>\r\n            <span>{props.post.categories.department}</span>\r\n            <label>Team</label>\r\n            <span>{props.post.categories.team}</span>\r\n            <label>Commitment</label>\r\n            <span>{props.post.categories.commitment}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"job-inclusion-statement\">\r\n          <h2>Mission Statement</h2>\r\n          <div className=\"blurb-body\">\r\n            {parse(props.post.additional)}\r\n          </div>\r\n        </div>\r\n        <div className=\"job-description\">\r\n          <h2>Description</h2>\r\n          <div className=\"blurb-body\">\r\n            {parse(props.post.description)}\r\n          </div>\r\n        </div>\r\n        <div className=\"job-requirements\">\r\n          <h2>Role Requirements</h2>\r\n          <div className=\"blurb-body\">\r\n            { props.post.lists.map((ls, idx) => {\r\n              return (\r\n                <div key={idx}>\r\n                  <h3>{ls.text}</h3>\r\n                  <div>\r\n                    {parse(ls.content)}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"job-app-form\">\r\n          <h2>Join Us</h2>\r\n          <div className=\"blurb-body\">\r\n          <JobApplicationForm post={props.post} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport './SuccessPage.css';\r\n\r\nexport function SuccessPage() {\r\n  const [seconds, setSeconds] = useState(5);\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const update = () => setSeconds(seconds - 1);\r\n    const interval = setInterval(update, 1000);\r\n\r\n    return () => {\r\n      if (seconds <= 0 || redirect) {\r\n        clearInterval(interval);\r\n        setRedirect(true);\r\n      }\r\n    };\r\n  }, [redirect, seconds, setSeconds]);\r\n\r\n  if (redirect) {\r\n    return (<Redirect to=\"/\" />);\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <div className=\"success-box\">\r\n        Success! Redirecting in <span>{seconds}</span> seconds.\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport JobListingPage from './pages/JobListingPage';\nimport {\n  Route,\n  HashRouter as Router,\n  Switch,\n} from \"react-router-dom\";\nimport JobPostingApi, { JobPosting } from './sdk/JobPostingApi';\nimport JobApplyPage from './pages/JobApplyPage';\nimport { SuccessPage } from './pages/SuccessPage';\n\nfunction App() {\n  let [postings, setPostings] = useState([] as JobPosting[]);\n\n  useEffect(() => {\n    const api = new JobPostingApi();\n    api.getPostings().then(x => {\n      const postings = x.map(job => {\n        if (!job.categories.department) {\n          job.categories.department = \"[None]\";\n        }\n\n        return job;\n      });\n\n      setPostings(postings);\n    });\n  }, []);\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <JobListingPage postings={postings} />\n        </Route>\n        <Route exact path=\"/success\">\n          <SuccessPage />\n        </Route>\n        <Route exact path=\"/apply/:id\" render={(props) => {\n            const post = postings.find(p => p.id === props.match.params.id);\n            if (post) {\n              return (<JobApplyPage post={post} />);\n            } else {\n              return <div>Error! Job {props.match.params.id} not found.</div>;\n            }\n          }} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}